digraph d {
  node_0 [label="PROGRAM"];
  node_1 [label="ENVIRONMENT = <name=document end_name=document>"];
  node_2 [label="PROGRAM"];
  node_3 [label="PARAGRAPH"];
  node_4 [label="PLAIN_TEXT = <
>"];
  node_3 -> node_4;
  node_2 -> node_3;
  node_5 [label="ENVIRONMENT = <name=rawproblem end_name=rawproblem>"];
  node_6 [label="ARGUMENT"];
  node_7 [label="PLAIN_TEXT = <input.txt>"];
  node_6 -> node_7;
  node_5 -> node_6 [style=dotted];
  node_8 [label="ARGUMENT"];
  node_9 [label="PLAIN_TEXT = <output.txt>"];
  node_8 -> node_9;
  node_5 -> node_8 [style=dotted];
  node_10 [label="PROGRAM"];
  node_11 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_11;
  node_12 [label="PARAGRAPH"];
  node_13 [label="PLAIN_TEXT = <Найти вершины, через которые проходит нечётное число наибольших полупутей, и
удалить (правым удалением) ту из них, ключ которой наибольший.>"];
  node_12 -> node_13;
  node_10 -> node_12;
  node_14 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_14;
  node_15 [label="PARAGRAPH"];
  node_16 [label="PLAIN_TEXT = <Если в дереве нет вершин, удовлетворяющих нужному свойству, то ничего
удалять не требуется. Выполнить прямой (левый) обход полученного дерева.>"];
  node_15 -> node_16;
  node_10 -> node_15;
  node_17 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_17;
  node_18 [label="PARAGRAPH"];
  node_19 [label="COMMAND = <name=InputFile>"];
  node_18 -> node_19;
  node_10 -> node_18;
  node_20 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_20;
  node_21 [label="PARAGRAPH"];
  node_22 [label="PLAIN_TEXT = <Входной файл содержит последовательность чисел>"];
  node_21 -> node_22;
  node_23 [label="UNESCAPED_COMMAND"];
  node_24 [label="ARGUMENT"];
  node_25 [label="PLAIN_TEXT = <&nbsp;>"];
  node_24 -> node_25;
  node_23 -> node_24;
  node_21 -> node_23;
  node_26 [label="UNESCAPED_COMMAND"];
  node_27 [label="ARGUMENT"];
  node_28 [label="PLAIN_TEXT = <&mdash;>"];
  node_27 -> node_28;
  node_26 -> node_27;
  node_21 -> node_26;
  node_29 [label="PLAIN_TEXT = < ключи вершин в порядке добавления в дерево. Гарантируется, что в дереве не менее двух вершин.>"];
  node_21 -> node_29;
  node_10 -> node_21;
  node_30 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_30;
  node_31 [label="PARAGRAPH"];
  node_32 [label="COMMAND = <name=OutputFile>"];
  node_31 -> node_32;
  node_10 -> node_31;
  node_33 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_33;
  node_34 [label="PARAGRAPH"];
  node_35 [label="PLAIN_TEXT = <Выходной файл должен содержать последовательность ключей вершин, полученную прямым левым обходом итогового дерева.>"];
  node_34 -> node_35;
  node_10 -> node_34;
  node_36 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_36;
  node_37 [label="PARAGRAPH"];
  node_38 [label="COMMAND = <name=Example>"];
  node_37 -> node_38;
  node_10 -> node_37;
  node_39 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_39;
  node_40 [label="PARAGRAPH"];
  node_41 [label="PLAIN_TEXT = <>"];
  node_40 -> node_41;
  node_42 [label="PLAIN_TEXT = <% this is not a comment>"];
  node_40 -> node_42;
  node_10 -> node_40;
  node_43 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_43;
  node_44 [label="VERBATIM_ENVIRONMENT" content="
1
2 % Comments are visible in verbatim
3
4
5
"];
  node_10 -> node_44;
  node_45 [label="PARAGRAPH_BREAKER"];
  node_10 -> node_45;
  node_46 [label="ENVIRONMENT = <name=example end_name=example>"];
  node_47 [label="PROGRAM"];
  node_48 [label="PARAGRAPH"];
  node_49 [label="PLAIN_TEXT = <>"];
  node_48 -> node_49;
  node_50 [label="COMMAND = <name=exmp>"];
  node_51 [label="ARGUMENT"];
  node_52 [label="PLAIN_TEXT = <>"];
  node_51 -> node_52;
  node_53 [label="PLAIN_TEXT = <10
5
20
4
6
15
30
3
7
14
40
8
50
9
60
>"];
  node_51 -> node_53;
  node_50 -> node_51;
  node_54 [label="ARGUMENT"];
  node_55 [label="PLAIN_TEXT = <>"];
  node_54 -> node_55;
  node_56 [label="PLAIN_TEXT = <10
5
4
3
6
7
8
9
20
15
14
30
40
50
>"];
  node_54 -> node_56;
  node_50 -> node_54;
  node_48 -> node_50;
  node_57 [label="PLAIN_TEXT = <>"];
  node_48 -> node_57;
  node_47 -> node_48;
  node_46 -> node_47;
  node_10 -> node_46;
  node_58 [label="PARAGRAPH"];
  node_59 [label="PLAIN_TEXT = <>"];
  node_58 -> node_59;
  node_10 -> node_58;
  node_60 [label="ENVIRONMENT = <name=center end_name=center>"];
  node_61 [label="PROGRAM"];
  node_62 [label="PARAGRAPH"];
  node_63 [label="PLAIN_TEXT = <>"];
  node_62 -> node_63;
  node_64 [label="PLAIN_TEXT = <    >"];
  node_62 -> node_64;
  node_65 [label="COMMAND = <name=includegraphics>"];
  node_66 [label="ARGUMENT"];
  node_67 [label="PLAIN_TEXT = <tst01-1.GIF>"];
  node_66 -> node_67;
  node_65 -> node_66;
  node_62 -> node_65;
  node_68 [label="PLAIN_TEXT = <>"];
  node_62 -> node_68;
  node_61 -> node_62;
  node_60 -> node_61;
  node_10 -> node_60;
  node_69 [label="PARAGRAPH"];
  node_70 [label="PLAIN_TEXT = <>"];
  node_69 -> node_70;
  node_71 [label="PLAIN_TEXT = <
>"];
  node_69 -> node_71;
  node_10 -> node_69;
  node_5 -> node_10;
  node_2 -> node_5;
  node_72 [label="PARAGRAPH"];
  node_73 [label="PLAIN_TEXT = <
>"];
  node_72 -> node_73;
  node_2 -> node_72;
  node_1 -> node_2;
  node_0 -> node_1;
  node_74 [label="PARAGRAPH"];
  node_75 [label="PLAIN_TEXT = <
>"];
  node_74 -> node_75;
  node_0 -> node_74;
}
